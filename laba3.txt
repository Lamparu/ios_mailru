;ORG 8000h
ORG 00H
LJMP PROG
ORG 03H
LJMP INTERACT

PROG:
P4 EQU 0C0h
MOV IE, #10000001b
SETB IT0
OUTPUT:
MOV P4, A
SJMP OUTPUT
INTERACT:
MOV DPTR, #7FFAh
MOVX A, @DPTR
MOV 20H, A; Save input
MOV DPTR, #8000h
MOV R7, #0 ; Address A
JNB ACC.3, A1
INC DPTR
INC R7
A1: JNB ACC.4, B0
INC DPTR
INC DPTR
INC R7
INC R7
B0: MOVX A, @DPTR
MOV R0, A; R0 - A
MOV A, 20H
MOV DPTR, #8004h
MOV R6, #0 ; Address B
JNB ACC.1, B1
INC DPTR
INC R6
B1: JNB ACC.2, MOV_B
INC DPTR
INC DPTR
INC R6
INC R6
MOV_B:
MOVX A, @DPTR
MOV R1, A; R1 - B
MOV A, 20H
JB ACC.0, LOG1; Analyze operation A0 == Logic
JNB ACC.0, ARIFM
LOG1:
JMP LOGIC

ARIFM:
;sum 1 R2
MOV R2, #00h
MOV R3, #00h
MOV A, R0
MOV B, R3
MOV C, ACC.0
JC M1
INC R2
M1: MOV C, ACC.2
JC M2
INC R2
M2: MOV C, B.2
JNC M3
INC R2
M3: MOV C, B.3
JNC M4
INC R2
;sum2 R3
MOV A, R1
M4: MOV C, ACC
JC M5
INC R3
M5: MOV C, ACC.7
JC M6
INC R3
M6: MOV C, B.0
JNC M7
INC R3
M7: MOV C, B.2
JNC M8
INC R3

M8: MOV A, R2
MOV B, R2
MUL AB
MOV R2, A ; proverit esli 4x4

MOV A, R3
MOV B, R3
MUL AB
MOV R3, A ; proverit esli 4x4

CLR C
SUBB A, R2
JNC MODI
MOV A, R2
CLR C
SUBB A, R3

MODI: SWAP A
JMP END_OP
;MOV P4, A

LOGIC: ; cycl <- adrA * |adrB - 2|
CLR C
MOV A, R6 ; A - adr B
SUBB A, #2h
JNC NEXT_L
MOV A, #2h
CLR C
SUBB A, R6 ; A - abs(adr B - 2)
NEXT_L:
MOV B, R7 ; B - adrA
MUL AB ; A - kol-vo sdvigov
JZ END_L
MOV R2, A ; R2 - kol-vo sdvigov
MOV A, R0
JZ END_L
CYCLE:
RL A
DEC R2
CJNE R2, #00h, CYCLE
END_L:
MOV A, R0

END_OP: RETI
END